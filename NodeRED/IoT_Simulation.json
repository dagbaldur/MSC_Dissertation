[
    {
        "id": "a2ebda5b93a62082",
        "type": "tab",
        "label": "IoT V2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "772673be21a44f92",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "CallFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "default",
        "payload": "123",
        "payloadType": "num",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "a03091b435fb0310"
            ]
        ]
    },
    {
        "id": "418b81626116cddd",
        "type": "google-cloud-iotcore device",
        "z": "a2ebda5b93a62082",
        "name": "GCP_Send",
        "qos": "0",
        "retain": "",
        "topic": "events",
        "broker": "8270c187.71d4d",
        "x": 1190,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2663292d4a8315ef",
        "type": "file in",
        "z": "a2ebda5b93a62082",
        "name": "GetFile",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "binary",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "2bf0c8f69ced067f"
            ]
        ]
    },
    {
        "id": "8258485d63599da2",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "SetRandomImage",
        "func": "var file_path = \"C:\\\\Users\\\\memoc\\\\Pictures\\\\IoT\\\\\";\nvar image_limit = 40;\nvar file_name = 0;\n\nfile_name = Math.floor(Math.random() * (image_limit - 0)) + 0;\nfile_path = file_path.concat(file_name.toString(),\".jpg\");\nmsg = {\n    \"filename\":file_path,\n    \"payload\":file_path\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "5c438ddcc9199afc",
                "2663292d4a8315ef"
            ]
        ]
    },
    {
        "id": "797bfae623f5ad47",
        "type": "google-cloud-iotcore device",
        "z": "a2ebda5b93a62082",
        "name": "GCP_Receive",
        "qos": "1",
        "retain": "",
        "topic": "",
        "broker": "8270c187.71d4d",
        "x": 120,
        "y": 500,
        "wires": [
            [],
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "2bf0c8f69ced067f",
        "type": "jimp-image",
        "z": "a2ebda5b93a62082",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "128",
        "parameter1Type": "num",
        "parameter2": "128",
        "parameter2Type": "num",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 3,
        "jimpFunction": "resize",
        "selectedJimpFunction": {
            "name": "resize",
            "fn": "resize",
            "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
            "parameters": [
                {
                    "name": "w",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "h",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "mode",
                    "type": "resizeMode",
                    "required": false,
                    "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                }
            ]
        },
        "x": 810,
        "y": 220,
        "wires": [
            [
                "42cdfde678ebefef",
                "bbf292bf2e22383d"
            ]
        ]
    },
    {
        "id": "42cdfde678ebefef",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "ByteArray",
        "func": "\ntst = msg.payload.toString('hex',0,29619)\n\nmsg2 = {\n    \"payload\":msg.payload,\n    \"topic\":\"projects/gcu-dissertation/topics/test\"\n}\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 280,
        "wires": [
            [
                "0011f624d0b84a71",
                "418b81626116cddd"
            ]
        ]
    },
    {
        "id": "0011f624d0b84a71",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "ByteArray msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "bbf292bf2e22383d",
        "type": "image viewer",
        "z": "a2ebda5b93a62082",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": false,
        "x": 950,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8c2dc6b7e0459fba",
        "type": "switch",
        "z": "a2ebda5b93a62082",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "crack_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "alert",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "snapshot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "interval",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 330,
        "y": 500,
        "wires": [
            [
                "77f297f0e41642cc"
            ],
            [
                "78e9dc805713f227"
            ],
            [
                "4a8d949137be57df",
                "5f1d4be90169475c"
            ],
            [
                "7237770d66e7684c"
            ],
            [
                "5896aac36ca04345"
            ]
        ]
    },
    {
        "id": "4a8d949137be57df",
        "type": "link out",
        "z": "a2ebda5b93a62082",
        "name": "",
        "mode": "link",
        "links": [
            "81c16aef86964f19"
        ],
        "x": 515,
        "y": 600,
        "wires": []
    },
    {
        "id": "81c16aef86964f19",
        "type": "link in",
        "z": "a2ebda5b93a62082",
        "name": "",
        "links": [
            "4a8d949137be57df"
        ],
        "x": 295,
        "y": 160,
        "wires": [
            [
                "8258485d63599da2"
            ]
        ]
    },
    {
        "id": "5c438ddcc9199afc",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "get_image",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "ed2241bd608e0b5c",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Command flow",
        "info": "The flow below is the main 'input' flow where commands are received and processed from GCP into the IoT devices. Through this flow the user is able to control and have interactions with the IoT devices remotely through the GCP Dashboard.\n\nThe following commands are available:\n - crack_status:identified = If a crack is identified by the AI in GCP, a command will be received to turn on a warning light on the Pi emulated device. It will turn off if the user sends switch_light action (locally or remotely)\n - interval-time = This emulates an approach to configure the devices. The configuration is limited to set the time frequency to send images from the device. The configuration is global for the flow.\n - alert = turns on and off the onboard device light\n - snapshot:device = The system will take an image from the bucket based on the device ID. This allows the system to take the correct image from the device\n - reset = resets the configurations of the device to its initial values (lights will turn off and intervalometer is set back to 10 seconds)",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "1bce8c53dd9a167f",
        "type": "rpi-sensehatsim out",
        "z": "a2ebda5b93a62082",
        "name": "",
        "x": 780,
        "y": 440,
        "wires": []
    },
    {
        "id": "78e9dc805713f227",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "Control lights",
        "func": "var msg1 = {\n    \"payload\":\"*,*,red\"\n};\n\nif(context.get(\"lights\") === undefined || context.get(\"lights\") === 'Off'){\n    context.set(\"lights\",\"On\");\n}\n\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 520,
        "wires": [
            [
                "1bce8c53dd9a167f",
                "dd410d83b920adfb"
            ]
        ]
    },
    {
        "id": "dd410d83b920adfb",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "Lights",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "77f297f0e41642cc",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "Crack Identified",
        "func": "var test = msg.payload.split(\":\",2)[1];\nvar msg1 = {};\nif(test === 'true'){\n    msg1 = {\n        \"payload\":\"*,*,red\"\n    };\n    \n    if(context.get(\"lights\") === undefined || context.get(\"lights\") === 'Off'){\n        context.set(\"lights\",\"On\");\n    }\n      \n}\nelse if(test === 'false'){\n    msg1 = {\n        \"payload\":\"*,*,off\"\n    };\n    if(context.get(\"lights\") === undefined || context.get(\"lights\") === 'On'){\n        context.set(\"lights\",\"Off\");\n    }\n}\n\nreturn msg1;  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 440,
        "wires": [
            [
                "9d8e90ed4a2ddf32",
                "1bce8c53dd9a167f"
            ]
        ]
    },
    {
        "id": "9d8e90ed4a2ddf32",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "identified",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "5896aac36ca04345",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "interval",
        "func": "\n//if(msg.topic === undefined){\n    var value = msg.payload.split(\"-\",2)[1];\n    context.set(\"interval\", value*1000);\n    msg.rate = value*1000;\n//}\n//else{\n// var interval = context.get(\"interval\");\n // msg2.delay = interval;  \n//}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 800,
        "wires": [
            [
                "e2f75503674b1ee7",
                "d8871b42cbc8c419"
            ]
        ]
    },
    {
        "id": "e2f75503674b1ee7",
        "type": "link out",
        "z": "a2ebda5b93a62082",
        "name": "",
        "links": [
            "3eeb0ed0ca097666"
        ],
        "x": 695,
        "y": 800,
        "wires": []
    },
    {
        "id": "3eeb0ed0ca097666",
        "type": "link in",
        "z": "a2ebda5b93a62082",
        "name": "",
        "links": [
            "e2f75503674b1ee7",
            "a81518bae9933ee9"
        ],
        "x": 155,
        "y": 300,
        "wires": [
            [
                "a03091b435fb0310"
            ]
        ]
    },
    {
        "id": "07e0796af7a3b291",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "vals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 340,
        "wires": []
    },
    {
        "id": "7237770d66e7684c",
        "type": "function",
        "z": "a2ebda5b93a62082",
        "name": "reset",
        "func": "context.set(\"interval\", 10*1000);//reset interval to 10 seconds\nmsg.rate = 10*1000;\nmsg.payload = \"*,*,off\";\nif(context.get(\"lights\") === \"On\"){//reset lights\n    context.set(\"lights\",\"Off\");\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "a81518bae9933ee9",
                "1bce8c53dd9a167f",
                "b334990002d59f54"
            ]
        ]
    },
    {
        "id": "a03091b435fb0310",
        "type": "delay",
        "z": "a2ebda5b93a62082",
        "name": "Delay",
        "pauseType": "timed",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "8258485d63599da2",
                "07e0796af7a3b291"
            ]
        ]
    },
    {
        "id": "28af65ce1377e524",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "Interval",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "interval-5",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "d8871b42cbc8c419",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "Set interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 840,
        "wires": []
    },
    {
        "id": "a81518bae9933ee9",
        "type": "link out",
        "z": "a2ebda5b93a62082",
        "name": "",
        "mode": "link",
        "links": [
            "3eeb0ed0ca097666"
        ],
        "x": 695,
        "y": 740,
        "wires": []
    },
    {
        "id": "ec23b68135a56574",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "7a890d5ebaffd0de",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "Snapshot",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "snapshot",
        "payloadType": "str",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "08d9d145a9974a9e",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "alert",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alert",
        "payloadType": "str",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "d5b193336990826e",
        "type": "inject",
        "z": "a2ebda5b93a62082",
        "name": "Crack identified",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "crack_status:true",
        "payloadType": "str",
        "x": 100,
        "y": 640,
        "wires": [
            [
                "8c2dc6b7e0459fba"
            ]
        ]
    },
    {
        "id": "bc41dbf71c6463b5",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Manual override",
        "info": "Manual override of commands (local test)",
        "x": 110,
        "y": 580,
        "wires": []
    },
    {
        "id": "a4b2d189c39490af",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Snapshot flow",
        "info": "Main flow to obtain picture from a local repository and send it through to GCP IoT",
        "x": 290,
        "y": 80,
        "wires": []
    },
    {
        "id": "293664d20ddda83e",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Intervalometer",
        "info": "Intervalometer that controls the rate at which images are taken from the snapshot flow. \nNote that this flow only controls the automatic flow and can be overwritten through a snapshot command, which isn't affected by the intervalometer.",
        "x": 260,
        "y": 240,
        "wires": []
    },
    {
        "id": "b334990002d59f54",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "Reset",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 760,
        "wires": []
    },
    {
        "id": "5f1d4be90169475c",
        "type": "debug",
        "z": "a2ebda5b93a62082",
        "name": "Snapshot",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 640,
        "wires": []
    },
    {
        "id": "47ed65f89f146d1b",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "GetFile",
        "info": "The GetFile node accesses the local machine and opens the target file set under the image function.\n\nIf the system finds an image in the local repository of the machine, the node sends the file to the JIMP node; otherwise, the node throws an error for missing files.",
        "x": 640,
        "y": 180,
        "wires": []
    },
    {
        "id": "28105af6742343e0",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "RandomImage",
        "info": "The SetRandomImage function creates a random filename string using the local repository path and the image name.\n\nThe local images must be named with an integer number, starting from 0 with no upper limit. The function requires the number of images in the repository to determine the range of images in the repository.\n\n - To modify the directory where images are stored locally, modify the variable _file_path_ to the location of the local repository.\n - To set the number of image files in the local system, modify variable _image_limit_ to the number of local image files of the repository.",
        "x": 460,
        "y": 180,
        "wires": []
    },
    {
        "id": "e71ba7f836f809ae",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "resize",
        "info": "The Resize node uses a JIMP node to modify the size of the images to transmit through to IoT core. The size limit of messages with GCP is 10mb and up to 10mb/s for streaming, so downsizing images is critic to successfully transmit periodic messages from Node-RED into GCP IoT Core.\n\nThe default image rezising values are 128x128.",
        "x": 800,
        "y": 180,
        "wires": []
    },
    {
        "id": "9ab122c392f16a95",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Viewer",
        "info": "A node that enables a local viewer of resized images for visualization, testing, and debug activities. It can be enabled or disabled by pressing the switch of the node.",
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "64663ba58415fa57",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "ByteArray",
        "info": "Pub/Sub rejects image files as it accepts only string and numeric values. To overcome this challenge, the ByteArray function transforms the resized image into a ByteArray string to transmit it through Pub/Sub.",
        "x": 980,
        "y": 240,
        "wires": []
    },
    {
        "id": "bd33f614aac6cc76",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "GCP_Send",
        "info": "GCP_Send node is the GCP IoT Core API that connects the broker communication between the flows and Pub/Sub.\n\nNOTE: For local use, its important to use the correct registry ID and device ID, as well as enable access to the corresponding key file (RS256 encoded certificate) to authenticate with the GCP Pub/Sub broker. If the values are not set correctly, or if the certificate does not correspond to the key of the device, the connection will be rejected and messages will not transmit.",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "997d4790d78f1ea5",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "CrackIdentified",
        "info": "The CrackIdentified function is called when the switch receives a message _crack_status_. When the message is processed and the function called, the system triggers the SenseHat emulator to turn on the onboard lights if the value is **true**. The onboard light indicates that a crack has been identified in the last image processed by the model. ",
        "x": 580,
        "y": 400,
        "wires": []
    },
    {
        "id": "d404428e2512c376",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "snapshot",
        "info": "Snapshot commands enables a manual override of the Snapshot flow by processing the command **snapshot** sent from the cloud dashboard to trigger the flow. This command will ignore the intervalometer process. ",
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "d7c91201063241c9",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "Control lights",
        "info": "The CrackIdentified function is called when the switch receives a message _crack_status_. When the message is processed and the function called, the system triggers the SenseHat emulator to turn on the onboard lights if the value is **true**. The onboard light indicates that a crack has been identified in the last image processed by the model. ",
        "x": 570,
        "y": 480,
        "wires": []
    },
    {
        "id": "84b46b7e1b72c933",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "reset",
        "info": "The reset command is a simple function that will reset the system values to its initial state:\n - **Sense HAT simulator:** the onboard lights will be turned off\n - **Intervalometer:** the frequence will be reset to 5 seconds per snapshot.",
        "x": 550,
        "y": 680,
        "wires": []
    },
    {
        "id": "650e29d17c47528a",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "interval",
        "info": "The interval function allows the dashboard to set the intervalometer frequency to a different value in seconds. The default value of the intervalometer is of 5 seconds, and it can be set to any other frequency through the interval command.\n\nThe interval command must contain an integer value greater than 0 to set the frequency to a different value from the default.",
        "x": 550,
        "y": 760,
        "wires": []
    },
    {
        "id": "5bab1376993cfc69",
        "type": "comment",
        "z": "a2ebda5b93a62082",
        "name": "GCP_Receive",
        "info": "GCP_Receive node is the GCP IoT Core API that connects the broker communication to receive commands from the Pub/Sub broker.\n\nNOTE: For local use, its important to use the correct registry ID and device ID, as well as enable access to the corresponding key file (RS256 encoded certificate) to authenticate with the GCP Pub/Sub broker. If the values are not set correctly, or if the certificate does not correspond to the key of the device, the connection will be rejected and messages will not transmit.",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "8270c187.71d4d",
        "type": "google-cloud-iotcore broker",
        "name": "tst",
        "commandsQos": "0",
        "configQos": "1",
        "brokerHost": "mqtt.googleapis.com",
        "brokerPort": "8883",
        "projectId": "gcu-dissertation",
        "region": "europe-west1",
        "registryId": "useful_registry",
        "deviceId": "EdgeDevice",
        "algorithm": "RS256",
        "privateKeyFile": "C:\\Users\\memoc\\Documents\\GCU\\Dissertation\\Certs IoT GCP\\ffs_private.pem",
        "keepAlive": "60",
        "reconnectPeriod": "5000",
        "connectTimeout": "30000",
        "clean": "true"
    }
]
